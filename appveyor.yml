environment:
  MINGW: C:\Qt\Tools\mingw492_32
  CMAKE_BUILD_TYPE: Release
  # set to d if debug build
  qt_dll_suffix: ""

  matrix:
    # Visual Studio build
    - generator: "Visual Studio 12 Win64"
      CMAKE_PREFIX_PATH: C:\Qt\5.4\msvc2013_64_opengl
      compiler_type: "vs12-x64"
      sdl_filename: SDL2-devel-2.0.3-VC.zip
      sdl_arch: x64
      cmake_args: "-DYAB_WANT_DIRECTSOUND=ON -DYAB_WANT_DIRECTINPUT=ON -DYAB_NETWORK=ON -DYAB_WANT_GDBSTUB=ON"

    # MingGW x86 build
    - generator: "MinGW Makefiles"
      CMAKE_PREFIX_PATH: C:\Qt\5.5\mingw492_32
      CMAKE_C_COMPILER: gcc
      CMAKE_CXX_COMPILER: g++ 
      CMAKE_MAKE_PROGRAM: mingw32-make.exe
      compiler_type: "mingw32"

    # filename on the sdl website
      sdl_filename: SDL2-devel-2.0.3-mingw.tar.gz
      sdl_arch: x86

    # included directx headers incompatible with mingw
      cmake_args: "-DYAB_NETWORK=ON -DYAB_WANT_GDBSTUB=ON"

shallow_clone: true

init:
  # cmake errors if sh on the path
  # - rm "C:\Program Files (x86)\Git\bin\sh.exe"
  - rm "C:\Program Files\Git\usr\bin\sh.exe"
  # cpack won't work because of chocolatey sharing the same name
  - rm "C:\ProgramData\chocolatey\bin\cpack.exe"
  - set Path=%MINGW%\bin;%Path%

before_build:
  # fetch appropriate sdl lib for visual studio or mingw
  - cd c:\
  - appveyor DownloadFile https://www.libsdl.org/release/%sdl_filename%

  # decompress it, shorten 7z output with FIND
  - 7z x %sdl_filename%  | FIND /V "ing  "

  # mingw version is a tar.gz, decompress again
  - if [%sdl_filename%]==[SDL2-devel-2.0.3-mingw.tar.gz] 7z x SDL2-devel-2.0.3-mingw.tar | FIND /V "ing  "

  # generate project files or makefiles
  - cd C:\projects\yabause\yabause
  - mkdir build
  - cd build
  - cmake -G "%generator%" %cmake_args% -DSDL2MAIN_LIBRARY=C:/SDL2-2.0.3/lib/%sdl_arch%/SDL2main.lib -DSDL2_INCLUDE_DIR=C:/SDL2-2.0.3/include/ -DSDL2_LIBRARY=C:/SDL2-2.0.3/lib/%sdl_arch%/SDL2.lib ..

build_script:
  - if ["%compiler_type%"]==["mingw32"] cmake --build .

  # force a release build and only show errors to shorten output
  - if ["%compiler_type%"]==["vs12-x64"] msbuild yabause.sln /p:configuration=Release /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

# make a distributable package of the build output
after_build:
  - cd C:\projects\yabause\yabause\build

  # zip all output files and push the artifact, name it with the commit, date and compiler type
  - ps: $git_hash_date = ${env:APPVEYOR_REPO_COMMIT}.substring(0, 7)
  - ps: $git_hash_date += "-"
  - ps: $git_hash_date += ${env:APPVEYOR_REPO_COMMIT_TIMESTAMP}.substring(0,10)
  - ps: ${env:yab_name} = "yabause-${git_hash_date}-${env:compiler_type}"
  - cmd: cpack -G ZIP -D CPACK_PACKAGE_FILE_NAME=%yab_name%
  - appveyor PushArtifact %yab_name%.zip